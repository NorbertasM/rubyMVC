<%= form_with(model: channel) do |form| %> 
  <% if channel.errors.any? %>
    <%= render layout: 'shared/error_modal' do %>
      <ul>
        <% channel.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    <% end %>
  <% end%>

  <div class="form-group">
    <%= form.label :title, style: "display: block" %>
    <%= form.text_field :title, class: "form-control" %>
  </div>

  <div class="form-group">
    <%= form.label "Stream Description", style: "display: block" %>
    <%= form.text_area :description, class: "form-control" %>
  </div>

  <div class="form-group">
    <%= form.label :stream_link, style: "display: block" %>
    <%= form.text_area :stream_link, class: "form-control" %>
  </div>

  <div class="form-group">
    <%= form.label :preview_url, style: "display: block" %>
    <%= form.text_area :preview_url, class: "form-control" %>
  </div>

  <div class="form-group">
    <%= form.label "About you", style: "display: block" %>
    <%= form.text_area :about, class: "form-control" %>
  </div>

  
 <%= form.hidden_field :games, id: "games-input" %> 

  <div class="dropdown mt-2">
    <input class="form-control games-search" type="text" id="games-search" onclick="showDropdown()" onfocus="showDropdown()" placeholder="Click to add Games">
    <div id="myDropdown" class="dropdown-content">
    </div>
  </div>

  <div id="games-div" class="my-1 py-2 border-bottom"> </div>

  <% if !@languages.nil?%>
    <div class="form-group">
      <%= form.label "Stream Language", style: "display: block" %>
      <%= select(:channel, :language_id, options_for_select(@languages, :selected => current_user.channel ? current_user.channel.language_id : 41), { }, { :class => 'form-select' }) %>
    </div>
  <%end%>

  <% if !@tags.nil?%>
    <div class="mb-2 border-bottom">
      <%= form.label "Channel Tags:", style: "display: block" %>
      <% if !@tags.nil? %>
        <% @tags.each do |tag| %>
          <%= form.label tag["name"] %>
          <%= form.check_box :tags, {multiple: true, skip_default_ids: false, class: "form-check-input", }, tag["id"], nil %>  
        <% end %>
      <% end %>
    </div>
  <%end%>


  <div class="mt-3">
    <% if current_page?(new_channel_path) %>
      <%= link_to "Cancel", channels_path, class: "btn btn-outline-primary" %>
    <% else %>
      <%= link_to "Cancel", @channel, class: "btn btn-outline-primary" %>
    <% end %>
    <%= form.submit class: "btn btn-primary"%>
  </div>
<% end %>

<script>
  getDefaultData()

  const searchBox = document.getElementById("games-search")

  if (searchBox) {
    searchBox.addEventListener('keyup', onSearchKeydown)
  }

  let globalSearchTimeout

  function onSearchKeydown(e) {
    const value = e.target?.value

    if (globalSearchTimeout) {
      clearTimeout(globalSearchTimeout)
    }

    if (value?.length > 2) {
      globalSearchTimeout = setTimeout(() => doSearch(value), 1000);
    } else if (value.length === 0) {
      globalSearchTimeout = setTimeout(() => getDefaultData(), 1000);
    }
  }

  function doSearch(searchString) {
    const dropdown = document.getElementById("myDropdown")

    if (dropdown) {
      fetch('http://127.0.0.1:10000/search?by=game&value='+searchString).then((response) => response.json())
      .then((data) => {
        while (dropdown.firstChild) {
          dropdown.removeChild(dropdown.lastChild);
        }

        const currentGames = document.getElementById("games-input")?.value

        if (data) {
          for (var i = 0; i < data.length; i++) {
            if (!currentGames?.includes(data[i].id)) {
              var option = document.createElement("option");
              option.value = data[i].id;
              option.innerText = data[i].name;
              option.classList.add("option-className")
              option.addEventListener('click', onOptionClick)
              dropdown.appendChild(option);
            }
          }
        }
      })
    } 
  }

  function getDefaultData() {
    const dropdown = document.getElementById("myDropdown")

    if (dropdown) {
      fetch('http://127.0.0.1:10000/game?step=10').then((response) => response.json())
      .then((data) => {
        while (dropdown.firstChild) {
          dropdown.removeChild(dropdown.lastChild);
        }
        
        const currentGames = document.getElementById("games-input")?.value

        for (var i = 0; i < data.games.length; i++) {
          if (!currentGames.includes(data.games[i].id)) {
            var option = document.createElement("option");
            option.value = data.games[i].id;
            option.innerText = data.games[i].name;
            option.classList.add("option-className")
            option.addEventListener('click', onOptionClick)
            dropdown.appendChild(option);
          }
        }
      })
    }
  }

  function onOptionClick(e) {
    const newValue = e.target.value
    onAddGame(newValue, e.target.innerText)

    const gamesInput = document.getElementById("games-input")

    if (gamesInput) {
      const currentValue = gamesInput.value

      gamesInput.value = typeof currentValue === 'string' ?
        currentValue.length === 0 ?
        [e.target.value] :
        [currentValue, newValue] :
        [...currentValue, newValue] 
    }
    const searchInput = document.getElementById("games-search")
    if (searchInput) searchInput.value = ""
    getDefaultData()
    hideDropdown()
  }

  function onAddGame(id, name) {
    const gamesDiv = document.getElementById("games-div")

    if (gamesDiv) {
      const item = document.createElement('span')
      item.id = id
      item.innerText = name + " X"
      item.classList.add("badge", "rounded-pill", "text-bg-primary", "tag-badge", "mx-1")

      item.addEventListener('click', function(e) {
        const gamesInput = document.getElementById("games-input")

        if (gamesInput) {
          const currentValue = gamesInput.value 
          let newValue = currentValue.replace(e.target.id, '')
          newValue = newValue.replace(",,", ',')
          newValue = newValue.replace(", ,", ',')

          if (newValue[0] === ',') {
            newValue = newValue.substring(1)
          }
          if (newValue[newValue.length - 1] === ',') {
            newValue = newValue.substring(0, newValue.length - 1)
          }

          gamesInput.value = newValue

          e.target.remove()
        }
      })

      gamesDiv.appendChild(item)
     }
     
    const dropdown = document.getElementById("myDropdown")

    if (dropdown) {
      console.log(dropdown.children)
      const option = [...dropdown.children].map(item => {
        if (item.value == id) item.remove()
      })
    }
   }

  function showDropdown() {
    document.getElementById("myDropdown").classList.add("show");
  }

  function hideDropdown() {
    document.getElementById("myDropdown").classList.remove("show");
  }

  window.onclick = function(event) {
    const dropdown = document.getElementById("myDropdown")
    if (dropdown) {
      if (!event.target.matches('.games-search') && !event.target.matches('.option-className') && !event.target.matches('.dropdown')) {
        if (dropdown.classList.contains("show")) {
          hideDropdown()
        }
      }
    }
  }
</script>